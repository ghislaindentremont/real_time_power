, trial_task_laterality_interaction_mean
)
,v
)
C = cor(subjCoefs)
corrplot(C)
dat = expand.grid(
subj = 1:N
# intercept
, I = 1
# task
, e1 = c(-.5,.5)
# trial
, e2 = 1:240 # -120  # center trial so that setting this effect to zero means average
# laterality
, e3 = c(-.5,.5)
)
nrow(dat) == 240*2*2*N
# trial_laterality_interaction_mean
dat$in1 = dat$e2 * dat$e3
# trial_task_interaction_mean
dat$in2 = dat$e2 * dat$e1
# task_laterality_interaction_mean
dat$in3 = dat$e1 * dat$e3
# trial_task_laterality_interaction_mean
dat$in4 = dat$e1 * dat$e2 * dat$e3
dat$obs = rowSums( subjCoefs[dat$subj,] * as.matrix(dat[,2:ncol(dat)],ncol=ncol(dat)) )
head(dat[dat$subj==1,])
noise_mean = 0.4
noise_sd = 0.2
noise_task_effect = 0.3
# overall mean noise
curve(dlnorm(x, log(noise_mean)-noise_sd/2, noise_sd), ylab = "density", xlab = "population noise", main = "overall mean")
# in ME task
curve(dlnorm(x, log(noise_mean)-noise_sd/2 + noise_task_effect/2, noise_sd), ylab = "density", xlab = "population noise", main = "+ task effect")
# in MI task
curve(dlnorm(x, log(noise_mean)-noise_sd/2 - noise_task_effect/2, noise_sd), ylab = "density", xlab = "population noise", main = "- task effect")
noise_subj = dat %>%
group_by(subj, e1) %>%
summarize(noise_subj = rlnorm(1, (log(noise_mean) - noise_sd/2) - e1*noise_task_effect, noise_sd))
hist(noise_subj$noise_subj, xlab = "sample noise", main = "")
dat = dat %>%
left_join(noise_subj)
dat$log_relative_power = rnorm(nrow(dat), dat$obs, dat$noise_subj)
names(dat)[3:5] = c("task", "trial", "laterality")
dat$task = factor(dat$task, levels = c(-.5, .5), labels = c("ME", "MI"))
dat$trial = dat$trial
dat$laterality = factor(dat$laterality, levels = c(-.5, .5), labels = c("contra", "ipsi"))
hist(dat$log_relative_power, main = "", xlab = "log relative power")
dat %>%
dplyr::filter(subj <= 4) %>%
ggplot()+
geom_point(aes(x=trial, y=log_relative_power, color = laterality), size = 0.5, alpha=0.4)+
geom_line(aes(x=trial, y=obs, color = laterality), size=1)+
geom_hline(yintercept=0, linetype = "dashed")+
facet_grid(subj~task)+
xlab("total trial")+
ylab("log relative power")
dat = dat[,c("subj", "task", "trial", "laterality", "log_relative_power")]
dat = dat[order(dat$subj,dat$task,dat$trial,dat$laterality),]
# readr::write_csv(dat,path='dat.csv')
# load packages we'll use ----
library(tidyverse)
library(rstan)
rstan_options(auto_write = TRUE)
library(devtools)
library(ezStan)
library(ez)
dat = readr::read_csv('dat.csv')
View(dat)
dat %>%
dplyr::arrange(
subj
) -> dat
W = get_contrast_matrix(
data = dat
, formula = ~  task * trial * laterality
)
View(W)
dat %>%
dplyr::group_by(
subj
) %>%
dplyr::summarize() %>% #View()
get_contrast_matrix(
formula = ~ 1
) -> B
View(B)
#package in list for Stan
data_for_stan = list(
#nTrials: num trials
nTrials = nrow(dat)
#power: power outcomes
, power = scale(dat$log_relative_power)[,1] #scaling for easy priors
#nS: num subjects
, nS = length(unique(dat$subj))
#S: trial-by-trial subject labels
, S = as.numeric(factor(dat$subj))
#nWmpower: num within predictors on mean power
, nWmpower = ncol(W)
#nBmpower: num group predictors on mean power
, nBmpower = ncol(B)
#nWspower: num within predictors on sd power
, nWspower = ncol(W)
#nBspower: num group predictors on sd power
, nBspower = ncol(B)
#Wmpower: within predictors for mean power
, Wmpower = W
#Bmpower: between predictors for mean power
, Bmpower = B
#Wspower: within predictors for sd power
, Wspower = W #for just intercepts do: matrix(W[,1],ncol=1)
#Bspower: between predictors for sd power
, Bspower = B #for just intercepts do: matrix(B[,1],ncol=1)
)
# # Compile & sample the model ----
# post_c = rstan::stan(
# 	file = 'bayesian_analysis.stan'
# 	, data = data_for_stan
# 	, seed = 1
# 	, chains = 4
# 	, cores = 4 #set this to # of physical cores on your system
# 	, iter = 2e3
# 	, init = 0
# 	, pars = c('normal01','cors_helper') #don't bother saving these variables
# 	, include = FALSE
# )
# save(post_c,file='post_c.rdata')
load('post_c.rdata')
summary(rowSums(get_elapsed_time(post_c)/60/60))
# this is still scaled
stan_summary(
from_stan = post_c
, par = 'coefMpower'
, W = W
, B = B
)
stan_summary(
from_stan = post_c
, par = 'coefSpower'
, W = W
, B = B
)
stan_summary(
from_stan = post_c
, par = 'sdsW'
)
stan_summary(
from_stan = post_c
, par = 'corsW'
, is_cor = T
)
cp = get_condition_post(
from_stan = post_c
, par = 'coefMpower'
, W = W
, B = B
, collapse_intercept_to_median = T
)
cp %>%
dplyr::group_by(
task
, trial
, laterality
) %>%
dplyr::summarise(
med = median(value)
, lo95 = quantile(value,.025)
, hi95 = quantile(value,.975)
, lo50 = quantile(value,.25)
, hi50 = quantile(value,.75)
) %>%
ggplot() +
geom_line(aes(x=trial, y=med, color = laterality))+
geom_line(aes(x=trial, y=hi95, color = laterality), linetype = "dotted")+
geom_line(aes(x=trial, y=lo95, color = laterality), linetype = "dotted")+
geom_line(aes(x=trial, y=hi50, color = laterality), linetype = "dashed")+
geom_line(aes(x=trial, y=lo50, color = laterality), linetype = "dashed")+
facet_grid(
. ~ task
)+
xlab("total trial")+
ylab("scaled log relative power")
cps = get_condition_post(
from_stan = post_c
, par = 'coefSpower'
, W = W
, B = B
, collapse_intercept_to_median = T  # I'm assuming that we do this to get rid of the uncertainty associated with the intercept so that we can focus more on the uncertainty associated with the effects.
)
cps %>%
dplyr::group_by(
task
, trial
, laterality
) %>%
dplyr::summarise(
med = median(value)
, lo95 = quantile(value,.025)
, hi95 = quantile(value,.975)
, lo50 = quantile(value,.25)
, hi50 = quantile(value,.75)
) %>%
ggplot() +
geom_line(aes(x=trial, y=med, color = laterality))+
geom_line(aes(x=trial, y=hi95, color = laterality), linetype = "dotted")+
geom_line(aes(x=trial, y=lo95, color = laterality), linetype = "dotted")+
geom_line(aes(x=trial, y=hi50, color = laterality), linetype = "dashed")+
geom_line(aes(x=trial, y=lo50, color = laterality), linetype = "dashed")+
facet_grid(
. ~ task
) +
xlab("total trial")+
ylab("log of scaled noise")
coefMpower_scaled = stan_summary(
from_stan = post_c
, par = 'coefMpower'
, W = W
, B = B
)
coefMpower = coefMpower_scaled[,1:3] * sd(dat$log_relative_power)
coefMpower[1,] = coefMpower[1,] + mean(dat$log_relative_power)
coefMpower
sdsW_scaled = stan_summary(
from_stan = post_c
, par = 'sdsW'
)
sdsW = sdsW_scaled[,1:3] * sd(dat$log_relative_power)
row.names(sdsW) = c(rep(row.names(coefMpower),2))
sdsW
SD = sd(dat$log_relative_power)
M = mean(dat$log_relative_power)
cp %>%
dplyr::group_by(
task
, trial
, laterality
) %>%
dplyr::summarise(
med = median(value) * SD + M
, lo95 = quantile(value,.025) * SD + M
, hi95 = quantile(value,.975) * SD + M
, lo50 = quantile(value,.25) * SD + M
, hi50 = quantile(value,.75) * SD + M
) %>%
ggplot() +
geom_line(aes(x=trial, y=med, color = laterality))+
geom_line(aes(x=trial, y=hi95, color = laterality), linetype = "dotted")+
geom_line(aes(x=trial, y=lo95, color = laterality), linetype = "dotted")+
geom_line(aes(x=trial, y=hi50, color = laterality), linetype = "dashed")+
geom_line(aes(x=trial, y=lo50, color = laterality), linetype = "dashed")+
facet_grid(
. ~ task
)+
ylab("population mean log relative power")
cps %>%
dplyr::group_by(
task
, trial
, laterality
) %>%
dplyr::summarise(
med = exp(median(value)) * SD
, lo95 = exp(quantile(value,.025)) * SD
, hi95 = exp(quantile(value,.975)) * SD
, lo50 = exp(quantile(value,.25)) * SD
, hi50 = exp(quantile(value,.75)) * SD
) %>%
ggplot() +
geom_line(aes(x=trial, y=med, color = laterality))+
geom_line(aes(x=trial, y=hi95, color = laterality), linetype = "dotted")+
geom_line(aes(x=trial, y=lo95, color = laterality), linetype = "dotted")+
geom_line(aes(x=trial, y=hi50, color = laterality), linetype = "dashed")+
geom_line(aes(x=trial, y=lo50, color = laterality), linetype = "dashed")+
facet_grid(
. ~ task
) +
ylab("population noise (log relative power)")
for_aov2 = dat %>%
mutate(
block1 = ifelse(trial <= 60, 1, 0)
) %>%
mutate(
block2 = ifelse(trial <= 120 & trial > 60, 2, 0)
) %>%
mutate(
block3 = ifelse(trial <= 180 & trial > 120, 3, 0)
) %>%
mutate(
block4 = ifelse(trial <= 240 & trial > 180, 4, 0)
) %>%
mutate(block = block1 + block2 + block3 + block4)
for_aov = for_aov2 %>%
group_by(subj, task, laterality, block) %>%
summarize(mean_log_relative_power = mean(log_relative_power))
varz = for_aov %>%
group_by(task, laterality, block) %>%
summarize(varz = var(mean_log_relative_power))
hist(varz$varz, main = "", xlab = "condition variances")
points(varz$varz, rep(0, length(varz$varz)))
MSE = mean(varz$varz)
ezANOVA(
as.data.frame(for_aov)
, mean_log_relative_power
, subj
, .(task, laterality, block)
, return_aov = T
, detailed = T
)
ezPlot(
as.data.frame(for_aov)
, mean_log_relative_power
, subj
, .(task, laterality, block)
, x = .(block)
, row = .(task)
, split = .(laterality)
, bar_size = sqrt(MSE/40) * 2  # I get ~95% CIs, using the MSE associated with the main effect of block
, bar_width = .1
# , do_bars = F
)
lat_diffs = aggregate(mean_log_relative_power ~ task + block + subj, data=for_aov, FUN=diff)
lat_task_diffs = aggregate(mean_log_relative_power ~ block + subj, data=lat_diffs, FUN=diff)
two_ways_means = aggregate(mean_log_relative_power ~ block, data=lat_task_diffs, FUN=mean)
two_way_mean = mean(two_ways_means$mean_log_relative_power)
two_ways_vars = aggregate(mean_log_relative_power ~ block, data=lat_task_diffs, FUN=var)
two_way_var = mean(two_ways_vars$mean_log_relative_power)
plot(two_way_mean, ylab = "mean log relative power", xlab = "", xaxt = "n", ylim = c(-0.4, .1))
abline(h=0, lty = "dotted")
axis(1, 1, tick = F, labels = "task * laterality")
segments(1, two_way_mean - 2*sqrt(two_way_var/40), 1, two_way_mean + 2*sqrt(two_way_var/40))
lat_means = aggregate(mean_log_relative_power ~ laterality + subj, data=for_aov, FUN=mean)
lat_effects = aggregate(mean_log_relative_power ~ subj, data=lat_means, FUN=diff)
lat_effect = mean(lat_effects$mean_log_relative_power)
lat_var = var(lat_effects$mean_log_relative_power)
plot(lat_effect, ylab = "mean log relative power", xlab = "", xaxt = "n", ylim = c(-0.1, .4))
abline(h=0, lty = "dotted")
abline(h=.1, lty = "dotted", col = "red")
axis(1, 1, tick = F, labels = "laterality")
segments(1, lat_effect - 2*sqrt(lat_var/40), 1, lat_effect + 2*sqrt(lat_var/40))
task_means = aggregate(mean_log_relative_power ~ task + subj, data=for_aov, FUN=mean)
task_effects = aggregate(mean_log_relative_power ~ subj, data=task_means, FUN=diff)
task_effect = mean(task_effects$mean_log_relative_power)
task_var = var(task_effects$mean_log_relative_power)
plot(task_effect, ylab = "mean log relative power", xlab = "", xaxt = "n", ylim = c(-0.1, .4))
abline(h=0, lty = "dotted")
abline(h=.2, lty = "dotted", col = "red")
axis(1, 1, tick = F, labels = "laterality")
segments(1, task_effect - 2*sqrt(task_var/40), 1, task_effect + 2*sqrt(task_var/40))
load('post_c.rdata')
summary(rowSums(get_elapsed_time(post_c)/60/60))
stan_summary(
from_stan = post_c
, par = 'coefMpower'
, W = W
, B = B
)
library(tidyverse)
library(rstan)
rstan_options(auto_write = TRUE)
library(devtools)
library(ezStan)
library(ez)
dat = readr::read_csv('dat.csv')
View(dat)
dat %>%
dplyr::arrange(
subj
) -> dat
W = get_contrast_matrix(
data = dat
, formula = ~  task * trial * laterality
)
View(W)
dat %>%
dplyr::group_by(
subj
) %>%
dplyr::summarize() %>% #View()
get_contrast_matrix(
formula = ~ 1
) -> B
View(B)
data_for_stan = list(
#nTrials: num trials
nTrials = nrow(dat)
#power: power outcomes
, power = scale(dat$log_relative_power)[,1] #scaling for easy priors
#nS: num subjects
, nS = length(unique(dat$subj))
#S: trial-by-trial subject labels
, S = as.numeric(factor(dat$subj))
#nWmpower: num within predictors on mean power
, nWmpower = ncol(W)
#nBmpower: num group predictors on mean power
, nBmpower = ncol(B)
#nWspower: num within predictors on sd power
, nWspower = ncol(W)
#nBspower: num group predictors on sd power
, nBspower = ncol(B)
#Wmpower: within predictors for mean power
, Wmpower = W
#Bmpower: between predictors for mean power
, Bmpower = B
#Wspower: within predictors for sd power
, Wspower = W #for just intercepts do: matrix(W[,1],ncol=1)
#Bspower: between predictors for sd power
, Bspower = B #for just intercepts do: matrix(B[,1],ncol=1)
)
# # Compile & sample the model ----
# post_c = rstan::stan(
# 	file = 'bayesian_analysis.stan'
# 	, data = data_for_stan
# 	, seed = 1
# 	, chains = 16
# 	, cores = 16 #set this to # of physical cores on your system
# 	, iter = 2e3
# 	, init = 0
# 	, pars = c('normal01','cors_helper') #don't bother saving these variables
# 	, include = FALSE
# )
# save(post_c,file='post_c.rdata')
load('post_c.rdata')
summary(rowSums(get_elapsed_time(post_c)/60/60))
coefMpower_scaled = stan_summary(
from_stan = post_c
, par = 'coefMpower'
, W = W
, B = B
)
sdsW_scaled = stan_summary(
from_stan = post_c
, par = 'coefSpower'
, W = W
, B = B
)
stan_summary(
from_stan = post_c
, par = 'sdsW'
)
stan_summary(
from_stan = post_c
, par = 'corsW'
, is_cor = T
)
cp = get_condition_post(
from_stan = post_c
, par = 'coefMpower'
, W = W
, B = B
, collapse_intercept_to_median = T
)
cp %>%
dplyr::group_by(
task
, trial
, laterality
) %>%
dplyr::summarise(
med = median(value)
, lo95 = quantile(value,.025)
, hi95 = quantile(value,.975)
, lo50 = quantile(value,.25)
, hi50 = quantile(value,.75)
) %>%
ggplot() +
geom_line(aes(x=trial, y=med, color = laterality))+
geom_line(aes(x=trial, y=hi95, color = laterality), linetype = "dotted")+
geom_line(aes(x=trial, y=lo95, color = laterality), linetype = "dotted")+
geom_line(aes(x=trial, y=hi50, color = laterality), linetype = "dashed")+
geom_line(aes(x=trial, y=lo50, color = laterality), linetype = "dashed")+
facet_grid(
. ~ task
)+
xlab("total trial")+
ylab("scaled log relative power")
cps = get_condition_post(
from_stan = post_c
, par = 'coefSpower'
, W = W
, B = B
, collapse_intercept_to_median = T
)
cps %>%
dplyr::group_by(
task
, trial
, laterality
) %>%
dplyr::summarise(
med = median(value)
, lo95 = quantile(value,.025)
, hi95 = quantile(value,.975)
, lo50 = quantile(value,.25)
, hi50 = quantile(value,.75)
) %>%
ggplot() +
geom_line(aes(x=trial, y=med, color = laterality))+
geom_line(aes(x=trial, y=hi95, color = laterality), linetype = "dotted")+
geom_line(aes(x=trial, y=lo95, color = laterality), linetype = "dotted")+
geom_line(aes(x=trial, y=hi50, color = laterality), linetype = "dashed")+
geom_line(aes(x=trial, y=lo50, color = laterality), linetype = "dashed")+
facet_grid(
. ~ task
) +
xlab("total trial")+
ylab("log of scaled noise")
coefMpower = coefMpower_scaled[,1:3] * sd(dat$log_relative_power)
coefMpower[1,] = coefMpower[1,] + mean(dat$log_relative_power)
coefMpower
sdsW = sdsW_scaled[,1:3] * sd(dat$log_relative_power)
row.names(sdsW) = c(rep(row.names(coefMpower),2))
